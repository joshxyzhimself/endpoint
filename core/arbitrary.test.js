
// @ts-check

const AssertionError = require('./AssertionError');
const assert = AssertionError.assert;

const { fix, add, sub, mul, div, gt, lt, gte, lte, eq, neq, abs, pow } = require('./arbitrary');

const tests = [
  [add('75', '25', '25'), '125'],
  [add('75', '25', '25'), '125'],
  [sub('75', '25', '25'), '25'],
  [mul('5', '5'), '25'],
  [add('5', mul('5', '5')), '30'],
  [div('125', '5', '5'), '5'],
  [div('1000', '10', '10'), '10'],
  [div('1000', '8.86'), '112.86681715575620767494356659142212'],
  [add(String(Number.MAX_SAFE_INTEGER), '0'), '9007199254740991'],
  [add(String(Number.MIN_SAFE_INTEGER), '0'), '-9007199254740991'],
  [sub(String(Number.MAX_SAFE_INTEGER), '1'), '9007199254740990'],
  [mul(String(Number.MAX_SAFE_INTEGER), '0.5'), '4503599627370495.5'],
  [div(String(Number.MAX_SAFE_INTEGER), '2'), '4503599627370495.5'],
  [mul(String(Math.PI), String(Math.PI)), '9.869604401089357120529513782849'],
  [div(String(Math.PI), String(Math.PI)), '1'],
  [div('1', '12'), '0.08333333333333333333333333333333'],
  [add('0.1', '0.2'), '0.3'],
  [mul('1.500', '1.3'), '1.95'],
  [mul('0', '1'), '0'],
  [mul('0', '-1'), '0'],
  [mul('-1', '1'), '-1'],
  [div('1.500', '1.3'), '1.15384615384615384615384615384615'],
  [div('0', '1'), '0'],
  [div('0', '-1'), '0'],
  [div('-1', '1'), '-1'],
  [mul('5', '5', '5', '5'), '625'],
  [mul('5', '5', '5', '123', '123', '5'), '9455625'],
  [mul('1.1', '1.28485', '1.3347', '1.4', '1.52', '1.62'), '6.50302483601232'],
  [div('1.1', '1.28485', '1.3347', '1.4', '1.52', '1.62'), '0.18606725800880943327544927552264'],
  [mul('100', '20', '5'), '10000'],
  [mul('100', mul('20', '5')), '10000'],
  [div('100', '20', '5'), '1'],
  [div('100', div('20', '5')), '25'],
  [mul('0.100', '10'), '1'],
  [div('1', '-45'), '-0.02222222222222222222222222222222'],
  [div('100', '-101'), '-0.990099009900990099009900990099'],
  [div('-0.01', '0.01'), '-1'],
  [fix(div('100', '-101'), 2), '-0.99'],
  [fix('10000.002000', 0), '10000'],
  [fix('10000.002000', 2), '10000.00'],
  [fix('10000.002000', 4), '10000.0020'],
  [fix('10000.002000', 8), '10000.00200000'],

  [gt('1.0', '0.0'), true],
  [gt('0.0', '1.0'), false],
  [gt('0.0', '0.0'), false],

  [lt('1.0', '0.0'), false],
  [lt('0.0', '1.0'), true],
  [lt('0.0', '0.0'), false],

  [gte('1.0', '0.0'), true],
  [gte('0.0', '1.0'), false],
  [gte('0.0', '0.0'), true],

  [lte('1.0', '0.0'), false],
  [lte('0.0', '1.0'), true],
  [lte('0.0', '0.0'), true],

  [eq('1.0', '0.0'), false],
  [eq('0.0', '1.0'), false],
  [eq('0.0', '0.0'), true],

  [neq('1.0', '0.0'), true],
  [neq('0.0', '1.0'), true],
  [neq('0.0', '0.0'), false],

  [abs('1.0'), '1'],
  [abs('-1.0'), '1'],
  [abs('0.0'), '0'],

  [pow('2', 2), '4'],
  [pow('20', 2), '400'],
  [pow('2', 20), '1048576'],
  [pow('123.456', 3), '1881640.295202816'],
];

tests.forEach((test, test_index) => {
  assert(test instanceof Array);
  const [value, expected] = test;
  assert(value === expected, `# ${test_index}, FAIL: "${value}" !== "${expected}"`);
  console.log(`# ${test_index}, PASS: "${value}" === "${expected}"`);
});